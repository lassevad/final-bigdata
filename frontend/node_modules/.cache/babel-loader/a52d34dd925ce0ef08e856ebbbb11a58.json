{"ast":null,"code":"var _jsxFileName = \"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Map.js\";\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ROUTE = \"http://localhost:5000\";\n\nclass MapService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geocsvfile: null,\n      maps: null,\n      cmaps: null,\n      mapItems: null,\n      cmapItems: null,\n      selectedCMap: null,\n      selectedMap: null,\n      geoColumns: null,\n      selectedGeoHueItem: null,\n      disp_image: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.getMaps = this.getMaps.bind(this);\n    this.setMap = this.setMap.bind(this);\n    this.getCMaps = this.getCMaps.bind(this);\n    this.setCMap = this.setCMap.bind(this);\n    this.fillMaps = this.fillMaps.bind(this);\n    this.fillCMaps = this.fillCMaps.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.getGeoColumns = this.getGeoColumns.bind(this);\n    this.sendMapInfo = this.sendMapInfo.bind(this);\n    this.setGeoHue = this.setGeoHue.bind(this);\n    this.changeDispImage = this.changeDispImage.bind(this);\n    this.generateMap = this.generateMap.bind(this);\n  }\n\n  makeId(length) {\n    var result = [];\n    var characters = '0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    }\n\n    return result.join('');\n  }\n\n  changeDispImage(newImage) {\n    this.setState({\n      disp_image: newImage\n    });\n  }\n\n  uploadcsv() {\n    console.log(this.state.geocsvfile);\n    let geocsv = this.state.geocsvfile;\n    return axios.post(API_ROUTE + \"/geocsv\", geocsv, {\n      headers: {\n        \"Content-Type\": \"text/csv\"\n      }\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  uploadMap() {\n    return axios.post(API_ROUTE + '/uploadMap', {\n      data: {\n        map: this.state.selectedMap\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  uploadCMap() {\n    return axios.post(API_ROUTE + '/uploadColorMap', {\n      data: {\n        cmap: this.state.selectedCMap\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  uploadGeoHue() {\n    return axios.post(API_ROUTE + '/uploadGeoHue', {\n      data: {\n        geohue: this.state.selectedGeoHueItem\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  getGeoColumns() {\n    return axios.get(API_ROUTE + \"/geocolumns\").then(response => {\n      console.log(response.data);\n      this.fillGeoColumns(response.data);\n    });\n  }\n\n  getCMaps() {\n    return axios.get(API_ROUTE + \"/colormaps\").then(response => {\n      console.log(typeof response.data.cmaps);\n      console.log(response.data.str);\n      this.setState({\n        cmaps: response.data.cmaps\n      });\n    });\n  }\n\n  getMaps() {\n    return axios.get(API_ROUTE + \"/maps\").then(response => {\n      console.log(typeof response.data.maps);\n      console.log(response.data.str);\n      this.setState({\n        maps: response.data.maps\n      });\n    });\n  }\n\n  setMap(e) {\n    console.log(e.target);\n    this.setState({\n      selectedMap: e.target.value\n    });\n  }\n\n  setCMap(e) {\n    console.log(e.target);\n    this.setState({\n      selectedCMap: e.target.value\n    });\n  }\n\n  setGeoHue(e) {\n    this.setState({\n      selectedGeoHueItem: e.target.value\n    });\n  }\n\n  async sendMapInfo() {\n    await this.uploadMap();\n    await this.uploadCMap();\n    await this.uploadGeoHue();\n    this.generateMap();\n  }\n\n  generateMap() {\n    return axios.get(API_ROUTE + \"/generateMap\", {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log(response);\n      var blob = new Blob([response.data], {\n        type: response.headers['content-type']\n      });\n      var image = URL.createObjectURL(blob);\n      console.log(image);\n      this.changeDispImage(image);\n      console.log(this.state.disp_image);\n      return image;\n    });\n  }\n\n  fillMaps() {\n    let strats = this.state.maps;\n    let menuItems = strats.map(strategy => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: strategy.id,\n      children: strategy.name\n    }, strategy.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this));\n    this.setState({\n      mapItems: menuItems\n    });\n  }\n\n  fillCMaps() {\n    let colors = this.state.cmaps;\n    let menuItems = colors.map(strategy => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: strategy.id,\n      children: strategy.name\n    }, strategy.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this));\n    this.setState({\n      cmapItems: menuItems\n    });\n  }\n\n  fillGeoColumns(geocolumns) {\n    console.log(geocolumns);\n    let menuItems = geocolumns.map((index, value) => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: value,\n      children: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this));\n    this.setState({\n      geoColumns: menuItems\n    });\n    console.log(this.state.geocolumns);\n  }\n\n  async handleChange(event) {\n    await this.setState({\n      geocsvfile: event.target.files[0],\n      disp_image: URL.createObjectURL(event.target.files[0])\n    });\n    await this.uploadcsv();\n    this.getGeoColumns();\n  }\n\n  async componentDidMount() {\n    await this.getMaps();\n    await this.getCMaps();\n    this.fillMaps();\n    this.fillCMaps();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Map background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: this.setMap,\n        children: this.state.mapItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Plot type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: this.setMap,\n        children: this.state.mapItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Color maps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: this.setCMap,\n        children: this.state.cmapItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Hue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: this.setGeoHue,\n        children: this.state.geoColumns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"file-field input-field\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignSelf: \"flex-end\",\n          justifyContent: \"center\",\n          className: \"upl\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"btn\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            multiple: true,\n            class: \"btn\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            class: \"waves-effect waves-light btn\",\n            onClick: this.sendMapInfo,\n            children: \"Create Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.disp_image,\n            onChange: this.changeDispImage,\n            id: \"map-upload\",\n            className: \"ImageSize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MapService;","map":{"version":3,"sources":["/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Map.js"],"names":["React","Select","InputLabel","MenuItem","Box","axios","API_ROUTE","MapService","Component","constructor","props","state","geocsvfile","maps","cmaps","mapItems","cmapItems","selectedCMap","selectedMap","geoColumns","selectedGeoHueItem","disp_image","handleChange","bind","getMaps","setMap","getCMaps","setCMap","fillMaps","fillCMaps","componentDidMount","getGeoColumns","sendMapInfo","setGeoHue","changeDispImage","generateMap","makeId","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","newImage","setState","uploadcsv","console","log","geocsv","post","headers","then","response","catch","error","uploadMap","data","map","uploadCMap","cmap","uploadGeoHue","geohue","get","fillGeoColumns","str","e","target","value","responseType","blob","Blob","type","image","URL","createObjectURL","strats","menuItems","strategy","id","name","colors","geocolumns","index","event","files","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\n\nconst API_ROUTE = \"http://localhost:5000\"\n\nclass MapService extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            geocsvfile: null,\n            maps: null,\n            cmaps: null,\n            mapItems: null,\n            cmapItems: null,\n            selectedCMap: null,\n            selectedMap: null,\n            geoColumns: null,\n            selectedGeoHueItem: null,\n            disp_image: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.getMaps = this.getMaps.bind(this)\n        this.setMap = this.setMap.bind(this)\n        this.getCMaps = this.getCMaps.bind(this)\n        this.setCMap = this.setCMap.bind(this)\n        this.fillMaps = this.fillMaps.bind(this)\n        this.fillCMaps = this.fillCMaps.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.getGeoColumns = this.getGeoColumns.bind(this)\n        this.sendMapInfo = this.sendMapInfo.bind(this)\n        this.setGeoHue = this.setGeoHue.bind(this)\n        this.changeDispImage = this.changeDispImage.bind(this)\n        this.generateMap = this.generateMap.bind(this)\n\n    }\n\n    makeId(length) {\n        var result = [];\n        var characters = '0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n        }\n        return result.join('');\n    }\n\n    changeDispImage(newImage) {\n        this.setState({\n            disp_image: newImage\n        });\n    }\n\n    uploadcsv() {\n        console.log(this.state.geocsvfile)\n        let geocsv = this.state.geocsvfile\n        return axios.post(API_ROUTE + \"/geocsv\", geocsv, {\n            headers: {\n                \"Content-Type\": \"text/csv\",\n            }\n        }).then(function (response) {\n            console.log(response);\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    uploadMap() {\n        return axios.post(API_ROUTE + '/uploadMap', {\n            data: {\n                map: this.state.selectedMap\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCMap() {\n        return axios.post(API_ROUTE + '/uploadColorMap', {\n            data: {\n                cmap: this.state.selectedCMap\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadGeoHue() {\n        return axios.post(API_ROUTE + '/uploadGeoHue', {\n            data: {\n                geohue: this.state.selectedGeoHueItem\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getGeoColumns() {\n        return axios.get(API_ROUTE + \"/geocolumns\")\n            .then(response => {\n                console.log(response.data)\n                this.fillGeoColumns(response.data)\n            })\n    }\n\n    getCMaps() {\n        return axios.get(API_ROUTE + \"/colormaps\")\n            .then(response => {\n                console.log(typeof response.data.cmaps)\n                console.log(response.data.str)\n                this.setState({\n                    cmaps: response.data.cmaps\n                })\n            })\n    }\n\n    getMaps() {\n        return axios.get(API_ROUTE + \"/maps\")\n            .then(response => {\n                console.log(typeof response.data.maps)\n                console.log(response.data.str)\n                this.setState({\n                    maps: response.data.maps\n                })\n            })\n    }\n\n    setMap(e) {\n        console.log(e.target)\n        this.setState({\n            selectedMap: e.target.value\n        })\n    }\n\n    setCMap(e) {\n        console.log(e.target)\n        this.setState({\n            selectedCMap: e.target.value\n        })\n    }\n\n    setGeoHue(e) {\n        this.setState({\n            selectedGeoHueItem: e.target.value\n        })\n    }\n\n    async sendMapInfo() {\n        await this.uploadMap()\n        await this.uploadCMap()\n        await this.uploadGeoHue()\n        this.generateMap()\n    }\n\n    generateMap() {\n        return axios.get(API_ROUTE + \"/generateMap\", { responseType: 'arraybuffer' })\n            .then(response => {\n                console.log(response)\n                var blob = new Blob(\n                    [response.data],\n                    { type: response.headers['content-type'] }\n                )\n\n                var image = URL.createObjectURL(blob)\n                console.log(image)\n\n                this.changeDispImage(image)\n                console.log(this.state.disp_image)\n                return image\n            });\n    }\n    fillMaps() {\n        let strats = this.state.maps;\n        let menuItems = strats.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            mapItems: menuItems\n        })\n    }\n\n    fillCMaps() {\n        let colors = this.state.cmaps;\n        let menuItems = colors.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            cmapItems: menuItems\n        })\n    }\n\n    fillGeoColumns(geocolumns) {\n        console.log(geocolumns)\n        let menuItems = geocolumns.map((index, value) => (\n            <MenuItem key={index} value={value}>{index}</MenuItem>\n        ));\n        this.setState({\n            geoColumns: menuItems\n        })\n        console.log(this.state.geocolumns)\n    }\n\n    async handleChange(event) {\n        await this.setState({\n            geocsvfile: event.target.files[0],\n            disp_image: URL.createObjectURL(event.target.files[0])\n        })\n        await this.uploadcsv()\n        this.getGeoColumns()\n    }\n\n    async componentDidMount() {\n        await this.getMaps()\n        await this.getCMaps()\n        this.fillMaps()\n        this.fillCMaps()\n\n    }\n\n    render() {\n        return (\n            <div>\n                <InputLabel>Map background</InputLabel>\n                <Select\n                    onChange={this.setMap}>\n                    {this.state.mapItems}\n                </Select>\n                <InputLabel>Plot type</InputLabel>\n                <Select\n                    onChange={this.setMap}>\n                    {this.state.mapItems}\n                </Select>\n                <InputLabel>Color maps</InputLabel>\n                <Select\n                    onChange={this.setCMap}>\n                    {this.state.cmapItems}\n                </Select>\n                <InputLabel>Hue</InputLabel>\n                <Select\n                    onChange={this.setGeoHue}>\n                    {this.state.geoColumns}\n                </Select>\n                <div class=\"file-field input-field\">\n                    <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <span class=\"btn\">Upload</span>\n                        <input type=\"file\" multiple class=\"btn\" onChange={this.handleChange} />\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendMapInfo}>Create Map</a>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <img src={this.state.disp_image} onChange={this.changeDispImage} id=\"map-upload\" className=\"ImageSize\" />\n                    </Box>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nexport default MapService;"]},"metadata":{},"sourceType":"module"}