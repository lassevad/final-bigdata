{"ast":null,"code":"var _jsxFileName = \"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/ImagePreview.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios'; //import 'materialize-css';\n\nimport Box from '@material-ui/core/Box';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ROUTE = \"localhost:5000\";\n\nclass UploadImgService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleImageChange = e => {\n      this.setState({\n        image: e.target.files[0]\n      });\n    };\n\n    this.state = {\n      file: null,\n      image: null,\n      disp_image: null,\n      image_id: 0,\n      binaries: null,\n      menuItems: null,\n      selectedMenuItem: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.makeId = this.makeId.bind(this);\n    this.sendFile = this.sendFile.bind(this);\n    this.getFile = this.getFile.bind(this);\n    this.fillMenu = this.fillMenu.bind(this);\n    this.setBinary = this.setBinary.bind(this);\n    this.uploadBinary = this.uploadBinary.bind(this);\n  }\n\n  makeId(length) {\n    var result = [];\n    var characters = '0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    }\n\n    return result.join('');\n  }\n\n  setCurrentImageId(payload) {\n    this.setState({\n      image_id: payload\n    });\n  }\n\n  changeDispImage(newImage) {\n    this.setState({\n      disp_image: newImage\n    });\n  }\n\n  upload(img, id) {\n    console.log(img);\n    return axios.post(API_ROUTE + \"/upload?id=\" + id, img, {\n      headers: {\n        \"Content-Type\": \"image/png\"\n      }\n    });\n  }\n\n  uploadBinary() {\n    return axios.post(API_ROUTE + '/uploadBinary', {\n      data: {\n        parallel: this.state.selectedMenuItem\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  sendFile() {\n    var img = this.state.file;\n    let id = this.makeId(8);\n    this.setCurrentImageId(id);\n    this.upload(img, id);\n  }\n\n  download(id) {\n    return axios.get(API_ROUTE + \"/download?id=\" + id, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      let blob = new Blob([response.data], {\n        type: response.headers['content-type']\n      });\n      let image = URL.createObjectURL(blob);\n      this.changeDispImage(image);\n      return image;\n    });\n  }\n\n  getFile() {\n    var id = this.state.image_id;\n    this.download(id);\n  }\n\n  getBinaries() {\n    return axios.get(API_ROUTE + \"/binaries\").then(response => {\n      console.log(typeof response.data.binaries);\n      this.setState({\n        binaries: response.data.binaries\n      });\n    });\n  }\n\n  async handleChange(event) {\n    await this.setState({\n      file: event.target.files[0],\n      disp_image: URL.createObjectURL(event.target.files[0])\n    });\n    this.sendFile();\n  }\n\n  componentDidMount() {\n    this.getBinaries();\n  }\n\n  fillMenu() {\n    let bins = this.state.binaries;\n    let menuItems = bins.map(binary => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: binary.value,\n      children: binary.name\n    }, binary.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this));\n    this.setState({\n      menuItems: menuItems\n    });\n    console.log(this.state.selectedMenuItem);\n  }\n\n  setBinary(e) {\n    this.setState({\n      selectedMenuItem: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"demo-simple-select-label\",\n        children: \"Binary file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: this.setBinary,\n        children: this.state.menuItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"file-field input-field\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignSelf: \"flex-end\",\n          justifyContent: \"center\",\n          className: \"upl\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"btn\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            multiple: true,\n            class: \"btn\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.disp_image,\n            onChange: this.handleImageChange,\n            id: \"image-upload\",\n            className: \"ImageSize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), console.log(this.state.file)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          className: \"blur\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            class: \"waves-effect waves-light btn\",\n            onClick: this.getFile,\n            children: \"Blur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            class: \"waves-effect waves-light btn\",\n            onClick: this.fillMenu,\n            children: \"fill menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            class: \"waves-effect waves-light btn\",\n            onClick: this.uploadBinary,\n            children: \"send binary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UploadImgService;","map":{"version":3,"sources":["/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/ImagePreview.js"],"names":["React","useState","axios","Box","Select","InputLabel","MenuItem","API_ROUTE","UploadImgService","Component","constructor","props","handleImageChange","e","setState","image","target","files","state","file","disp_image","image_id","binaries","menuItems","selectedMenuItem","handleChange","bind","makeId","sendFile","getFile","fillMenu","setBinary","uploadBinary","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","setCurrentImageId","payload","changeDispImage","newImage","upload","img","id","console","log","post","headers","data","parallel","then","response","catch","error","download","get","responseType","blob","Blob","type","URL","createObjectURL","getBinaries","event","componentDidMount","bins","map","binary","value","name","render"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n//import 'materialize-css';\nimport Box from '@material-ui/core/Box';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst API_ROUTE = \"localhost:5000\"\n\nclass UploadImgService extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      file: null,\n      image: null,\n      disp_image: null,\n      image_id: 0,\n      binaries: null,\n      menuItems: null,\n      selectedMenuItem: null\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.makeId = this.makeId.bind(this)\n    this.sendFile = this.sendFile.bind(this)\n    this.getFile = this.getFile.bind(this)\n    this.fillMenu = this.fillMenu.bind(this)\n    this.setBinary = this.setBinary.bind(this)\n    this.uploadBinary = this.uploadBinary.bind(this)\n  }\n\n  makeId(length) {\n    var result = [];\n    var characters = '0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    }\n    return result.join('');\n  }\n\n  setCurrentImageId(payload) {\n    this.setState({\n      image_id: payload\n    });\n  }\n\n  changeDispImage(newImage) {\n    this.setState({\n      disp_image: newImage\n    });\n  }\n\n  upload(img, id) {\n    console.log(img)\n    return axios.post(API_ROUTE + \"/upload?id=\" + id, img, {\n      headers: {\n        \"Content-Type\": \"image/png\",\n      }\n    })\n  };\n\n  uploadBinary() {\n    return axios.post(API_ROUTE + '/uploadBinary', {\n      data: {\n        parallel: this.state.selectedMenuItem\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  sendFile() {\n    var img = this.state.file\n    let id = this.makeId(8);\n    this.setCurrentImageId(id);\n    this.upload(img, id);\n  }\n\n  download(id) {\n    return axios.get(API_ROUTE + \"/download?id=\" + id, { responseType: 'arraybuffer' })\n      .then(response => {\n        let blob = new Blob(\n          [response.data],\n          { type: response.headers['content-type'] }\n        )\n        let image = URL.createObjectURL(blob)\n        this.changeDispImage(image)\n        return image\n      });\n  }\n\n  getFile() {\n    var id = this.state.image_id\n    this.download(id)\n  }\n\n  getBinaries() {\n    return axios.get(API_ROUTE + \"/binaries\")\n      .then(response => {\n        console.log(typeof response.data.binaries)\n        this.setState({\n          binaries: response.data.binaries\n        })\n      })\n  }\n\n  async handleChange(event) {\n    await this.setState({\n      file: event.target.files[0],\n      disp_image: URL.createObjectURL(event.target.files[0])\n    })\n    this.sendFile()\n  }\n\n  handleImageChange = (e) => {\n    this.setState({\n      image: e.target.files[0]\n    })\n  };\n\n  componentDidMount() {\n    this.getBinaries()\n  }\n\n  fillMenu() {\n    let bins = this.state.binaries;\n    let menuItems = bins.map((binary) =>\n      <MenuItem value={binary.value} key={binary.name}>{binary.name}</MenuItem>\n    );\n    this.setState({\n      menuItems: menuItems\n    })\n    console.log(this.state.selectedMenuItem)\n  }\n\n  setBinary(e) {\n    this.setState({\n      selectedMenuItem: e.target.value\n    })\n\n  }\n\n  render() {\n\n    return (\n\n      <div>\n\n        <InputLabel id=\"demo-simple-select-label\">Binary file</InputLabel>\n        <Select\n          onChange={this.setBinary}>\n          {this.state.menuItems}\n        </Select>\n\n\n\n        <div class=\"file-field input-field\">\n          <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n            <span class=\"btn\">Upload</span>\n            <input type=\"file\" multiple class=\"btn\" onChange={this.handleChange} />\n          </Box>\n          <Box display=\"flex\" justifyContent=\"center\">\n            <img src={this.state.disp_image} onChange={this.handleImageChange} id=\"image-upload\" className=\"ImageSize\" />\n            {console.log(this.state.file)}\n          </Box>\n          <Box display=\"flex\" justifyContent=\"center\" className=\"blur\">\n            <a class=\"waves-effect waves-light btn\" onClick={this.getFile}>Blur</a>\n            <a class=\"waves-effect waves-light btn\" onClick={this.fillMenu}>fill menu</a>\n            <a class=\"waves-effect waves-light btn\" onClick={this.uploadBinary}>send binary</a>\n          </Box>\n\n        </div>\n\n      </div>\n\n\n\n\n\n    );\n  }\n}\n\nexport default UploadImgService;\n"]},"metadata":{},"sourceType":"module"}