[{"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/index.js":"1","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/App.js":"2","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/reportWebVitals.js":"3","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/Graph.js":"4","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/ImagePreview.js":"5","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/Map.js":"6","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/index.js":"7","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/App.js":"8","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/reportWebVitals.js":"9","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Map.js":"10","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Graph.js":"11","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Supervised.js":"12","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Unsupervised.js":"13"},{"size":636,"mtime":1622033832723,"results":"14","hashOfConfig":"15"},{"size":565,"mtime":1622033832720,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1622033832724,"results":"17","hashOfConfig":"15"},{"size":8306,"mtime":1622035337251,"results":"18","hashOfConfig":"15"},{"size":4628,"mtime":1622035335287,"results":"19","hashOfConfig":"15"},{"size":8201,"mtime":1622035338337,"results":"20","hashOfConfig":"15"},{"size":636,"mtime":1622033832723,"results":"21","hashOfConfig":"22"},{"size":865,"mtime":1622927774966,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1622033832724,"results":"24","hashOfConfig":"22"},{"size":8317,"mtime":1622895709133,"results":"25","hashOfConfig":"22"},{"size":8412,"mtime":1622894533592,"results":"26","hashOfConfig":"22"},{"size":8347,"mtime":1622928409129,"results":"27","hashOfConfig":"22"},{"size":7449,"mtime":1622895010191,"results":"28","hashOfConfig":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hjq62n",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"19tc7yb",{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/index.js",[],"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/App.js",["60","61","62","63","64"],"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/reportWebVitals.js",[],"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/Graph.js",["65","66"],"import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\n\nconst API_ROUTE = \"localhost:5000\"\n\nclass GraphService extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            csvfile: null,\n            strategies: null,\n            strategyItems: null,\n            selectedStrategy: null,\n            colItems: null,\n            selectedCol1Item: null,\n            selectedCol2Item: null,\n            selectedHueItem: null,\n            disp_image: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.getStrategies = this.getStrategies.bind(this)\n        this.setStrategy = this.setStrategy.bind(this)\n        this.fillStrategies = this.fillStrategies.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.getColumns = this.getColumns.bind(this)\n        this.sendGraphInfo = this.sendGraphInfo.bind(this)\n        this.setCol1 = this.setCol1.bind(this)\n        this.setCol2 = this.setCol2.bind(this)\n        this.setHue = this.setHue.bind(this)\n        this.changeDispImage = this.changeDispImage.bind(this)\n        this.generateGraph = this.generateGraph.bind(this)\n\n    }\n\n    makeId(length) {\n        var result = [];\n        var characters = '0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n        }\n        return result.join('');\n    }\n\n    changeDispImage(newImage) {\n        this.setState({\n            disp_image: newImage\n        });\n    }\n\n    uploadcsv() {\n        console.log(this.state.csvfile)\n        let csv = this.state.csvfile\n        return axios.post(API_ROUTE + \"/csv\", csv, {\n            headers: {\n                \"Content-Type\": \"text/csv\",\n            }\n        }).then(function (response) {\n            console.log(response);\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    uploadStrategy() {\n        return axios.post(API_ROUTE + '/uploadStrategy', {\n            data: {\n                strategy: this.state.selectedStrategy\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCol1() {\n        return axios.post(API_ROUTE + '/uploadCol1', {\n            data: {\n                col1: this.state.selectedCol1Item\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCol2() {\n        return axios.post(API_ROUTE + '/uploadCol2', {\n            data: {\n                col2: this.state.selectedCol2Item\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadHue() {\n        return axios.post(API_ROUTE + '/uploadHue', {\n            data: {\n                hue: this.state.selectedHueItem\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getStrategies() {\n        return axios.get(API_ROUTE + \"/strategies\")\n            .then(response => {\n                console.log(typeof response.data.strategies)\n                console.log(response.data.str)\n                this.setState({\n                    strategies: response.data.strategies\n                })\n            })\n    }\n\n    getColumns() {\n        return axios.get(API_ROUTE + \"/columns\")\n            .then(response => {\n                console.log(response.data)\n                this.fillColumns(response.data)\n            })\n    }\n\n    setStrategy(e) {\n        console.log(e.target)\n        this.setState({\n            selectedStrategy: e.target.value\n        })\n    }\n\n    setCol1(e) {\n        this.setState({\n            selectedCol1Item: e.target.value\n        })\n    }\n\n    setCol2(e) {\n        this.setState({\n            selectedCol2Item: e.target.value\n        })\n    }\n\n    setHue(e) {\n        this.setState({\n            selectedHueItem: e.target.value\n        })\n    }\n\n    async sendGraphInfo() {\n        await this.uploadStrategy()\n        await this.uploadCol1()\n        await this.uploadCol2()\n        await this.uploadHue()\n        this.generateGraph()\n    }\n\n    generateGraph() {\n        return axios.get(API_ROUTE + \"/generateGraph\", { responseType: 'arraybuffer' })\n            .then(response => {\n                console.log(response)\n                var blob = new Blob(\n                    [response.data],\n                    { type: response.headers['content-type'] }\n                )\n\n                var image = URL.createObjectURL(blob)\n                console.log(image)\n\n                this.changeDispImage(image)\n                console.log(this.state.disp_image)\n                return image\n            });\n    }\n    fillStrategies() {\n        let strats = this.state.strategies;\n        let menuItems = strats.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            strategyItems: menuItems\n        })\n    }\n\n    fillColumns(columns) {\n        console.log(columns)\n        let menuItems = columns.map((index, value) => (\n            <MenuItem key={index} value={value}>{index}</MenuItem>\n        ));\n        this.setState({\n            columns: menuItems\n        })\n        console.log(this.state.columns)\n    }\n\n    async handleChange(event) {\n        await this.setState({\n            csvfile: event.target.files[0],\n            disp_image: URL.createObjectURL(event.target.files[0])\n        })\n        await this.uploadcsv()\n        this.getColumns()\n    }\n\n    async componentDidMount() {\n        await this.getStrategies()\n        this.fillStrategies()\n\n    }\n\n    render() {\n        return (\n            <div>\n                <InputLabel>Plot strategy</InputLabel>\n                <Select\n                    onChange={this.setStrategy}>\n                    {this.state.strategyItems}\n                </Select>\n                <InputLabel>Column 1</InputLabel>\n                <Select\n                    onChange={this.setCol1}>\n                    {this.state.columns}\n                </Select>\n                <InputLabel>Column 2</InputLabel>\n                <Select\n                    onChange={this.setCol2}>\n                    {this.state.columns}\n                </Select>\n                <InputLabel>Hue</InputLabel>\n                <Select\n                    onChange={this.setHue}>\n                    {this.state.columns}\n                </Select>\n                <div class=\"file-field input-field\">\n                    <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <span class=\"btn\">Upload</span>\n                        <input type=\"file\" multiple class=\"btn\" onChange={this.handleChange} />\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendGraphInfo}>Create Graph</a>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <img src={this.state.disp_image} onChange={this.changeDispImage} id=\"graph-upload\" className=\"ImageSize\" />\n                    </Box>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nexport default GraphService;","/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/ImagePreview.js",["67","68","69","70","71"],"/Users/lassevad/Desktop/utveksling/Fag/finals/cloud-service/frontend/src/Map.js",["72","73"],"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/index.js",[],["74","75"],"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/App.js",["76","77","78","79","80"],"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/reportWebVitals.js",[],"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Map.js",["81","82"],"import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\n\nconst API_ROUTE = \"http://localhost:5000\"\n\nclass MapService extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            geocsvfile: null,\n            maps: null,\n            cmaps: null,\n            mapItems: null,\n            cmapItems: null,\n            selectedCMap: null,\n            selectedMap: null,\n            geoColumns: null,\n            selectedGeoHueItem: null,\n            disp_image: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.getMaps = this.getMaps.bind(this)\n        this.setMap = this.setMap.bind(this)\n        this.getCMaps = this.getCMaps.bind(this)\n        this.setCMap = this.setCMap.bind(this)\n        this.fillMaps = this.fillMaps.bind(this)\n        this.fillCMaps = this.fillCMaps.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.getGeoColumns = this.getGeoColumns.bind(this)\n        this.sendMapInfo = this.sendMapInfo.bind(this)\n        this.setGeoHue = this.setGeoHue.bind(this)\n        this.changeDispImage = this.changeDispImage.bind(this)\n        this.generateMap = this.generateMap.bind(this)\n\n    }\n\n    makeId(length) {\n        var result = [];\n        var characters = '0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n        }\n        return result.join('');\n    }\n\n    changeDispImage(newImage) {\n        this.setState({\n            disp_image: newImage\n        });\n    }\n\n    uploadcsv() {\n        console.log(this.state.geocsvfile)\n        let geocsv = this.state.geocsvfile\n        return axios.post(API_ROUTE + \"/geocsv\", geocsv, {\n            headers: {\n                \"Content-Type\": \"text/csv\",\n            }\n        }).then(function (response) {\n            console.log(response);\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    uploadMap() {\n        return axios.post(API_ROUTE + '/uploadMap', {\n            data: {\n                map: this.state.selectedMap\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCMap() {\n        return axios.post(API_ROUTE + '/uploadColorMap', {\n            data: {\n                cmap: this.state.selectedCMap\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadGeoHue() {\n        return axios.post(API_ROUTE + '/uploadGeoHue', {\n            data: {\n                geohue: this.state.selectedGeoHueItem\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getGeoColumns() {\n        return axios.get(API_ROUTE + \"/geocolumns\")\n            .then(response => {\n                console.log(response.data)\n                this.fillGeoColumns(response.data)\n            })\n    }\n\n    getCMaps() {\n        return axios.get(API_ROUTE + \"/colormaps\")\n            .then(response => {\n                console.log(typeof response.data.cmaps)\n                console.log(response.data.str)\n                this.setState({\n                    cmaps: response.data.cmaps\n                })\n            })\n    }\n\n    getMaps() {\n        return axios.get(API_ROUTE + \"/maps\")\n            .then(response => {\n                console.log(typeof response.data.maps)\n                console.log(response.data.str)\n                this.setState({\n                    maps: response.data.maps\n                })\n            })\n    }\n\n    setMap(e) {\n        console.log(e.target)\n        this.setState({\n            selectedMap: e.target.value\n        })\n    }\n\n    setCMap(e) {\n        console.log(e.target)\n        this.setState({\n            selectedCMap: e.target.value\n        })\n    }\n\n    setGeoHue(e) {\n        this.setState({\n            selectedGeoHueItem: e.target.value\n        })\n    }\n\n    async sendMapInfo() {\n        await this.uploadMap()\n        await this.uploadCMap()\n        await this.uploadGeoHue()\n        this.generateMap()\n    }\n\n    generateMap() {\n        return axios.get(API_ROUTE + \"/generateMap\", { responseType: 'arraybuffer' })\n            .then(response => {\n                console.log(response)\n                var blob = new Blob(\n                    [response.data],\n                    { type: response.headers['content-type'] }\n                )\n\n                var image = URL.createObjectURL(blob)\n                console.log(image)\n\n                this.changeDispImage(image)\n                console.log(this.state.disp_image)\n                return image\n            });\n    }\n    fillMaps() {\n        let strats = this.state.maps;\n        let menuItems = strats.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            mapItems: menuItems\n        })\n    }\n\n    fillCMaps() {\n        let colors = this.state.cmaps;\n        let menuItems = colors.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            cmapItems: menuItems\n        })\n    }\n\n    fillGeoColumns(geocolumns) {\n        console.log(geocolumns)\n        let menuItems = geocolumns.map((index, value) => (\n            <MenuItem key={index} value={value}>{index}</MenuItem>\n        ));\n        this.setState({\n            geoColumns: menuItems\n        })\n        console.log(this.state.geocolumns)\n    }\n\n    async handleChange(event) {\n        await this.setState({\n            geocsvfile: event.target.files[0],\n            disp_image: URL.createObjectURL(event.target.files[0])\n        })\n        await this.uploadcsv()\n        this.getGeoColumns()\n    }\n\n    async componentDidMount() {\n        await this.getMaps()\n        await this.getCMaps()\n        this.fillMaps()\n        this.fillCMaps()\n\n    }\n\n    render() {\n        return (\n            <div class=\"map\" className=\"mapBack\">\n                <h4>\n                    Plot a map!\n                </h4>\n                <InputLabel>Plot type</InputLabel>\n                <Select\n                    onChange={this.setMap}>\n                    {this.state.mapItems}\n                </Select>\n\n                <InputLabel>Color maps</InputLabel>\n                <Select\n                    onChange={this.setCMap}>\n                    {this.state.cmapItems}\n                </Select>\n                <InputLabel>Hue</InputLabel>\n                <Select\n                    onChange={this.setGeoHue}>\n                    {this.state.geoColumns}\n                </Select>\n                <div class=\"file-field input-field\">\n                    <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <span class=\"btn\">Upload</span>\n                        <input type=\"file\" multiple class=\"btn\" onChange={this.handleChange} />\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendMapInfo}>Create Map</a>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <img src={this.state.disp_image} onChange={this.changeDispImage} id=\"map-upload\" className=\"ImageSize\" />\n                    </Box>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nexport default MapService;","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Graph.js",["83","84"],"import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\n\nconst API_ROUTE = \"http://localhost:5000\"\n\nclass GraphService extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            csvfile: null,\n            strategies: null,\n            strategyItems: null,\n            selectedStrategy: null,\n            colItems: null,\n            selectedCol1Item: null,\n            selectedCol2Item: null,\n            selectedHueItem: null,\n            disp_image: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.getStrategies = this.getStrategies.bind(this)\n        this.setStrategy = this.setStrategy.bind(this)\n        this.fillStrategies = this.fillStrategies.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.getColumns = this.getColumns.bind(this)\n        this.sendGraphInfo = this.sendGraphInfo.bind(this)\n        this.setCol1 = this.setCol1.bind(this)\n        this.setCol2 = this.setCol2.bind(this)\n        this.setHue = this.setHue.bind(this)\n        this.changeDispImage = this.changeDispImage.bind(this)\n        this.generateGraph = this.generateGraph.bind(this)\n\n    }\n\n    makeId(length) {\n        var result = [];\n        var characters = '0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n        }\n        return result.join('');\n    }\n\n    changeDispImage(newImage) {\n        this.setState({\n            disp_image: newImage\n        });\n    }\n\n    uploadcsv() {\n        console.log(this.state.csvfile)\n        let csv = this.state.csvfile\n        return axios.post(API_ROUTE + \"/csv\", csv, {\n            headers: {\n                \"Content-Type\": \"text/csv\",\n            }\n        }).then(function (response) {\n            console.log(response);\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    uploadStrategy() {\n        return axios.post(API_ROUTE + '/uploadStrategy', {\n            data: {\n                strategy: this.state.selectedStrategy\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCol1() {\n        return axios.post(API_ROUTE + '/uploadCol1', {\n            data: {\n                col1: this.state.selectedCol1Item\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadCol2() {\n        return axios.post(API_ROUTE + '/uploadCol2', {\n            data: {\n                col2: this.state.selectedCol2Item\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadHue() {\n        return axios.post(API_ROUTE + '/uploadHue', {\n            data: {\n                hue: this.state.selectedHueItem\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getStrategies() {\n        return axios.get(API_ROUTE + \"/strategies\")\n            .then(response => {\n                console.log(typeof response.data.strategies)\n                console.log(response.data.str)\n                this.setState({\n                    strategies: response.data.strategies\n                })\n            })\n    }\n\n    getColumns() {\n        return axios.get(API_ROUTE + \"/columns\")\n            .then(response => {\n                console.log(response.data)\n                this.fillColumns(response.data)\n            })\n    }\n\n    setStrategy(e) {\n        console.log(e.target)\n        this.setState({\n            selectedStrategy: e.target.value\n        })\n    }\n\n    setCol1(e) {\n        this.setState({\n            selectedCol1Item: e.target.value\n        })\n    }\n\n    setCol2(e) {\n        this.setState({\n            selectedCol2Item: e.target.value\n        })\n    }\n\n    setHue(e) {\n        this.setState({\n            selectedHueItem: e.target.value\n        })\n    }\n\n    async sendGraphInfo() {\n        await this.uploadStrategy()\n        await this.uploadCol1()\n        await this.uploadCol2()\n        await this.uploadHue()\n        this.generateGraph()\n    }\n\n    generateGraph() {\n        return axios.get(API_ROUTE + \"/generateGraph\", { responseType: 'arraybuffer' })\n            .then(response => {\n                console.log(response)\n                var blob = new Blob(\n                    [response.data],\n                    { type: response.headers['content-type'] }\n                )\n\n                var image = URL.createObjectURL(blob)\n                console.log(image)\n\n                this.changeDispImage(image)\n                console.log(this.state.disp_image)\n                return image\n            });\n    }\n    fillStrategies() {\n        let strats = this.state.strategies;\n        let menuItems = strats.map((strategy) =>\n            <MenuItem value={strategy.id} key={strategy.name}>{strategy.name}</MenuItem>\n        );\n        this.setState({\n            strategyItems: menuItems\n        })\n    }\n\n    fillColumns(columns) {\n        console.log(columns)\n        let menuItems = columns.map((index, value) => (\n            <MenuItem key={index} value={value}>{index}</MenuItem>\n        ));\n        this.setState({\n            columns: menuItems\n        })\n        console.log(this.state.columns)\n    }\n\n    async handleChange(event) {\n        await this.setState({\n            csvfile: event.target.files[0],\n            disp_image: URL.createObjectURL(event.target.files[0])\n        })\n        await this.uploadcsv()\n        this.getColumns()\n    }\n\n    async componentDidMount() {\n        await this.getStrategies()\n        this.fillStrategies()\n\n    }\n\n    render() {\n        return (\n            <div className=\"graphBack\">\n                <h4>\n                    Plot a graph!\n                </h4>\n                <InputLabel>Plot strategy</InputLabel>\n                <Select\n                    onChange={this.setStrategy}>\n                    {this.state.strategyItems}\n                </Select>\n                <InputLabel>Column 1</InputLabel>\n                <Select\n                    onChange={this.setCol1}>\n                    {this.state.columns}\n                </Select>\n                <InputLabel>Column 2</InputLabel>\n                <Select\n                    onChange={this.setCol2}>\n                    {this.state.columns}\n                </Select>\n                <InputLabel>Hue</InputLabel>\n                <Select\n                    onChange={this.setHue}>\n                    {this.state.columns}\n                </Select>\n                <div class=\"file-field input-field\">\n                    <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <span class=\"btn\">Upload</span>\n                        <input type=\"file\" multiple class=\"btn\" onChange={this.handleChange} />\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendGraphInfo}>Create Graph</a>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <img src={this.state.disp_image} onChange={this.changeDispImage} id=\"graph-upload\" className=\"ImageSize\" />\n                    </Box>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nexport default GraphService;","/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Supervised.js",["85","86","87"],"/Users/lassevad/Desktop/utveksling/Fag/finals/bigdata-service/frontend/src/Unsupervised.js",["88","89","90"],"import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\n\nconst API_ROUTE = \"http://localhost:5000\"\n\nclass KmeansService extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            disp_image: null,\n            kInput: null,\n            supColumns: null,\n            supColItems: null,\n            selectedXCol: null,\n            selectedYCol: null,\n            predInput: null,\n            predOutput: null\n        }\n        this.setK = this.setK.bind(this)\n        this.setPred = this.setPred.bind(this)\n        this.setXColumn = this.setXColumn.bind(this)\n        this.setYColumn = this.setYColumn.bind(this)\n        this.getSupColumns = this.getSupColumns.bind(this)\n        this.fillSupColumns = this.fillSupColumns.bind(this)\n        this.generateGraph = this.generateGraph.bind(this)\n        this.changeDispImage = this.changeDispImage.bind(this)\n        this.sendKmeansInfo = this.sendKmeansInfo.bind(this)\n        this.getPred = this.getPred.bind(this)\n        this.sendPredInfo = this.sendPredInfo.bind(this)\n\n    }\n\n    setK(e) {  \n        this.setState({\n            kInput: e.target.value\n        });  \n        console.log(this.state.kInput)  \n    }\n\n    setPred(e) {  \n        this.setState({\n            predInput: e.target.value\n        });  \n        console.log(this.state.predInput)  \n    }\n\n    setXColumn(e) {\n        console.log(e.target.value)\n        this.setState({\n            selectedXCol: e.target.value,\n        })\n    }\n\n    setYColumn(e) {\n        console.log(e.target.value)\n        this.setState({\n            selectedYCol: e.target.value,\n        })\n    }\n\n    getSupColumns() {\n        return axios.get(API_ROUTE + \"/supcolumns\")\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    supColumns: response.data\n                })\n            })\n    }\n\n    getPred() {\n        return axios.get(API_ROUTE + \"/pred\")\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    predOutput: response.data\n                })\n            })\n    }\n\n    fillSupColumns() {\n        let cols = this.state.supColumns;\n        let menuItems = cols.map((index, value) =>\n            <MenuItem value={value} key={index}>{index}</MenuItem>\n        );\n        this.setState({\n            supColItems: menuItems\n        })\n    }\n\n\n    generateGraph() {\n        return axios.get(API_ROUTE + \"/generateKmeansGraph\", { responseType: 'arraybuffer' })\n            .then(response => {\n                console.log(response)\n                var blob = new Blob(\n                    [response.data],\n                    { type: response.headers['content-type'] }\n                )\n\n                var image = URL.createObjectURL(blob)\n                console.log(image)\n\n                this.changeDispImage(image)\n                console.log(this.state.disp_image)\n                return image\n            });\n    }\n\n    changeDispImage(newImage) {\n        this.setState({\n            disp_image: newImage\n        });\n    }\n\n    uploadXCol(){\n        return axios.post(API_ROUTE + '/uploadXCol', {\n            data: {\n                X: this.state.selectedXCol\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadYCol(){\n        return axios.post(API_ROUTE + '/uploadYCol', {\n            data: {\n                Y: this.state.selectedYCol\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadK(){\n        return axios.post(API_ROUTE + '/uploadK', {\n            data: {\n                K: this.state.kInput\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    uploadPred(){\n        return axios.post(API_ROUTE + '/uploadPred', {\n            data: {\n                pred: this.state.predInput\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    async sendKmeansInfo() {\n        await this.uploadXCol()\n        await this.uploadYCol()\n        await this.uploadK()\n        await this.generateGraph()\n    } \n\n    async sendPredInfo(){\n        await this.uploadPred()\n        this.getPred()\n    }\n\n\n\n    async componentDidMount() {\n        await this.getSupColumns()\n        await this.fillSupColumns()\n    }\n\n    render() {\n        return (\n            <div class=\"graph\" className=\"unsupBack\">\n                <h4>\n                    Unsupervised ML!\n                </h4>\n                <InputLabel>X Column</InputLabel>\n                <Select\n                    onChange={this.setXColumn}>\n                    {this.state.supColItems}\n                </Select>\n                <InputLabel>Y Column</InputLabel>\n                <Select\n                    onChange={this.setYColumn}>\n                    {this.state.supColItems}\n                </Select>\n                <InputLabel>K: Number of clusters</InputLabel>\n                <TextField id=\"standard-basic\" value={this.state.kInput} onChange={this.setK} className=\"k\"/>\n\n                <div class=\"file-field input-field\">\n                    <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendKmeansInfo}>Do K-means</a>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <img src={this.state.disp_image} onChange={this.changeDispImage} id=\"graph-upload\" className=\"ImageSize\" />\n                    </Box>\n                </div>\n                <h5>\n                    Which cluster are you in?\n                </h5>\n                <InputLabel>Input your own column values:</InputLabel>\n                <TextField id=\"standard-basic\" value={this.state.predInput} onChange={this.setPred} className=\"predk\"/>\n                <Box display=\"flex\" alignSelf=\"flex-end\" justifyContent=\"center\" className=\"upl\">\n                        <a class=\"waves-effect waves-light btn\" onClick={this.sendPredInfo}>Predict cluster</a>\n                    </Box>\n                <h6>\n                    You are in cluster number: {this.state.predOutput}\n                </h6>\n            </div>\n        );\n    }\n\n\n\n\n}\n\n\nexport default KmeansService;",{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"95","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"96","line":1,"column":38,"nodeType":"93","messageId":"94","endLine":1,"endColumn":47},{"ruleId":"91","severity":1,"message":"97","line":6,"column":10,"nodeType":"93","messageId":"94","endLine":6,"endColumn":16},{"ruleId":"91","severity":1,"message":"98","line":7,"column":7,"nodeType":"93","messageId":"94","endLine":7,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":270,"column":25,"nodeType":"101","endLine":270,"endColumn":94},{"ruleId":"102","severity":1,"message":"103","line":273,"column":25,"nodeType":"101","endLine":273,"endColumn":132},{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":171,"column":13,"nodeType":"101","endLine":171,"endColumn":122},{"ruleId":"99","severity":1,"message":"100","line":175,"column":13,"nodeType":"101","endLine":175,"endColumn":76},{"ruleId":"99","severity":1,"message":"100","line":176,"column":13,"nodeType":"101","endLine":176,"endColumn":77},{"ruleId":"99","severity":1,"message":"100","line":177,"column":13,"nodeType":"101","endLine":177,"endColumn":81},{"ruleId":"99","severity":1,"message":"100","line":267,"column":25,"nodeType":"101","endLine":267,"endColumn":92},{"ruleId":"102","severity":1,"message":"103","line":270,"column":25,"nodeType":"101","endLine":270,"endColumn":130},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"95","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"96","line":1,"column":38,"nodeType":"93","messageId":"94","endLine":1,"endColumn":47},{"ruleId":"91","severity":1,"message":"97","line":8,"column":10,"nodeType":"93","messageId":"94","endLine":8,"endColumn":16},{"ruleId":"91","severity":1,"message":"98","line":10,"column":7,"nodeType":"93","messageId":"94","endLine":10,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":271,"column":25,"nodeType":"101","endLine":271,"endColumn":92},{"ruleId":"102","severity":1,"message":"103","line":274,"column":25,"nodeType":"101","endLine":274,"endColumn":130},{"ruleId":"99","severity":1,"message":"100","line":273,"column":25,"nodeType":"101","endLine":273,"endColumn":94},{"ruleId":"102","severity":1,"message":"103","line":276,"column":25,"nodeType":"101","endLine":276,"endColumn":132},{"ruleId":"99","severity":1,"message":"100","line":245,"column":25,"nodeType":"101","endLine":245,"endColumn":94},{"ruleId":"102","severity":1,"message":"103","line":248,"column":25,"nodeType":"101","endLine":248,"endColumn":132},{"ruleId":"99","severity":1,"message":"100","line":260,"column":25,"nodeType":"101","endLine":260,"endColumn":93},{"ruleId":"99","severity":1,"message":"100","line":229,"column":25,"nodeType":"101","endLine":229,"endColumn":95},{"ruleId":"102","severity":1,"message":"103","line":232,"column":25,"nodeType":"101","endLine":232,"endColumn":132},{"ruleId":"99","severity":1,"message":"100","line":241,"column":25,"nodeType":"101","endLine":241,"endColumn":93},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'axios' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-global-assign","no-unsafe-negation"]